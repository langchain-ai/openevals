name: release-python
run-name: Release Python Package from ${{ inputs.working-directory || 'python' }} by @${{ github.actor }}
on:
  push:
    branches:
      - main
    paths:
      - "python/pyproject.toml"
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "From which folder this pipeline executes"
      dangerous-nonmain-release:
        required: false
        type: boolean
        default: false
        description: "Release from a non-main branch (danger!)"
  workflow_dispatch:
    inputs:
      working-directory:
        description: "From which folder this pipeline executes"
        default: "python"
        required: true
        type: choice
        options:
          - "python"
      dangerous-nonmain-release:
        required: false
        type: boolean
        default: false
        description: "Release from a non-main branch (danger!)"

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  UV_FROZEN: "true"
  UV_NO_SYNC: "true"
  WORKING_DIRECTORY: ${{ inputs.working-directory || 'python' }}

jobs:
  build:
    if: github.ref == 'refs/heads/main' || inputs.dangerous-nonmain-release == true
    environment: Scheduled testing
    runs-on: ubuntu-latest

    outputs:
      pkg-name: ${{ steps.check-version.outputs.pkg-name }}
      version: ${{ steps.check-version.outputs.version }}
      should-publish: ${{ steps.check-pypi.outputs.should-publish }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python + uv
        uses: "./.github/actions/uv_setup"
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # We want to keep this build stage *separate* from the release stage,
      # so that there's no sharing of permissions between them.
      # The release stage has trusted publishing and GitHub repo contents write access,
      # and we want to keep the scope of that access limited just to the release job.
      # Otherwise, a malicious `build` step (e.g. via a compromised dependency)
      # could get access to our GitHub or PyPI credentials.
      #
      # Per the trusted publishing GitHub Action:
      # > It is strongly advised to separate jobs for building [...]
      # > from the publish job.
      # https://github.com/pypa/gh-action-pypi-publish#non-goals
      - name: Build Python package
        run: uv build
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ${{ env.WORKING_DIRECTORY }}/dist/

      - name: Check Version
        id: check-version
        shell: python
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          import os
          import tomllib
          with open("pyproject.toml", "rb") as f:
              data = tomllib.load(f)
          pkg_name = data["project"]["name"]
          version = data["project"]["version"]
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"pkg-name={pkg_name}\n")
              f.write(f"version={version}\n")

      - name: Check PyPI for existing version
        id: check-pypi
        shell: python
        run: |
          import json
          import os
          import urllib.request

          pkg_name = "${{ steps.check-version.outputs.pkg-name }}"
          version = "${{ steps.check-version.outputs.version }}"

          try:
              url = f"https://pypi.org/pypi/{pkg_name}/json"
              with urllib.request.urlopen(url) as response:
                  data = json.loads(response.read())
                  if version in data.get("releases", {}):
                      print(f"Version {version} already exists on PyPI")
                      should_publish = "false"
                  else:
                      print(f"Version {version} does not exist on PyPI")
                      should_publish = "true"
          except urllib.error.HTTPError as e:
              if e.code == 404:
                  print(f"Package {pkg_name} not found on PyPI (first release)")
                  should_publish = "true"
              else:
                  raise

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"should-publish={should_publish}\n")

  publish:
    needs:
      - build
    if: needs.build.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      # This permission is used for trusted publishing:
      # https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/
      #
      # Trusted publishing has to also be configured on PyPI for each package:
      # https://docs.pypi.org/trusted-publishers/adding-a-publisher/
      id-token: write

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python + uv
        uses: "./.github/actions/uv_setup"
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: ${{ env.WORKING_DIRECTORY }}/dist/

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ${{ env.WORKING_DIRECTORY }}/dist/
          verbose: true
          print-hash: true
          # Temp workaround since attestations are on by default as of gh-action-pypi-publish v1.11.0
          attestations: false

  mark-release:
    needs:
      - build
      - publish
    if: needs.build.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      # This permission is needed by `ncipollo/release-action` to
      # create the GitHub release.
      contents: write

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python + uv
        uses: "./.github/actions/uv_setup"
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: ${{ env.WORKING_DIRECTORY }}/dist/

      - name: Create Tag
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.WORKING_DIRECTORY }}/dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          tag: ${{needs.build.outputs.pkg-name}}==${{ needs.build.outputs.version }}
          commit: main
          makeLatest: true